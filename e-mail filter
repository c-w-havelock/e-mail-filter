# Craig Havelock
# Program for filtering e-mails from a text and providing a list of all the addresses in an address format

# Import the 're' module for regular expressions
import re

# Initialize empty lists to store email addresses
retrieved_addresses = []
not_danone_addresses = []

# Function to find and store email addresses in a given text
def find_emails(text):
    # Use regular expression to find email addresses in the text
    emails_in_text = re.findall(r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]+', text)
    # Add the found email addresses to the 'retrieved_addresses' list
    retrieved_addresses.extend(emails_in_text)
    # Call find_non_danone_emails to filter out non-Danone email addresses
    find_non_danone_emails(emails_in_text)

# Function to read text from a .txt file
def Read_text_file():
    # Prompt the user for a file path and remove any double quotes
    file_path = re.sub('"', '', input("Please provide the file path to a .txt file\n"))
    # Open the file and read its contents
    file = open(file_path, "r")
    content = file.read()
    file.close()
    # Call the find_emails function to extract email addresses from the file's content
    find_emails(content)

# Function to filter out non-Danone email addresses
def find_non_danone_emails(emails_in_text):
    for i in emails_in_text:
        # Check if the email address does not end with a Danone domain
        if not i.endswith(("@danone.com", "@external.danone.com", "@alpro.com", "@nutricia.com")):
            # Add non-Danone email addresses to the 'not_danone_addresses' list
            not_danone_addresses.append(i)

# Function for the input loop
def input_loop():
    text_input = input()
    if text_input == "file":
        Read_text_file()
    elif text_input == "quit":
        exit()
    elif text_input != "exit":
        find_emails(text_input)
        input_loop()

# Main function
def main():
    print('''
    Enter "quit" on a new line to close the application.
    Enter "exit" on a new line to finish input.
    Enter "file" to provide a folder path for reading a .txt file.
    Please provide your text:
    ''')

    input_loop()
    # Display the retrieved email addresses
    print("\nEmail Addresses:\n")
    for i in retrieved_addresses:
        print(f"{i},")
    # Display the total number of email addresses found
    print(f"\nTotal email addresses found: {len(retrieved_addresses)}\n")
    # Display a comma-separated list of retrieved email addresses
    print(f"Copy this:\n {', '.join(retrieved_addresses)}")
    # Display non-Danone email addresses in comma-separated list
    print("\nThese are non-Danone e-mail addresses:\n", ', '.join(not_danone_addresses))
    main()

print(
        '''
          _____                                _   _        _____   ___                _     _
         |  __ \                              | | (_)      |  __ \ / _ \              | |   | |
         | |  | | __ _ _ __   ___   ___  _ __ | |_ _  ___  | |__) | | | |_      ____ _| |__ | |
         | |  | |/ _` | '_ \ / _ \ / _ \| '_ \| __| |/ _ \ |  ___/| | | \ \ /\ / / _` | '_ \| |
         | |__| | (_| | | | | (_) | (_) | | | | |_| |  __/ | |    | |_| |\ V  V / (_| | | | |_|
         |_____/ \__,_|_| |_|\___/ \___/|_| |_|\__|_|\___| |_|     \___/  \_/\_/ \__,_|_| |_(_)
                                                 _/ |
               ______                      _ _  |__/                   _           _
              |  ____|                    (_) |     | |               | |         | |
              | |__ ______ _ __ ___   __ _ _| |   __| | ___   ___   __| | __ _  __| |
              |  __|______| '_ ` _ \ / _` | | |  / _` |/ _ \ / _ \ / _` |/ _` |/ _` |
              | |____     | | | | | | (_| | | | | (_| | (_) | (_) | (_| | (_| | (_| |
              |______|    |_| |_| |_|\__,_|_|_|  \__,_|\___/ \___/ \__,_|\__,_|\__,_

        ''')
main()
